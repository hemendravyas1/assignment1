swagger: '2.0'
info:
  title: AI Customer Service API
  description: 'AI Customer Service application, built during the Cloud and Big Data course at NYU'
  version: 1.0.0
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /chatbot:
    post:
      summary: The endpoint for the Natural Language Understanding API.
      description: |
        This API takes in one or more messages from the client and returns
        one or more messages as a response. The API leverages the NLP
        backend functionality, paired with state and profile information
        and returns a context-aware reply.
      tags:
        - NLU
      operationId: sendMessage
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BotRequest'
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
/users:
  options:
    summary: CORS support
    description: |
      Enable CORS by returning correct headers
    tags:
    - CORS
    responses:
      200:
        description: Default response for CORS method
        headers:
          Access-Control-Allow-Origin:
            schema:
              type: string
          Access-Control-Allow-Methods:
            schema:
              type: string
          Access-Control-Allow-Headers:
            schema:
              type: string
        content: {}
    x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
        application/json: |
          {
            "statusCode" : 200
          }
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: |
              {}
definitions:
  BotRequest:
    type: object
    properties:
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
  BotResponse:
    type: object
    properties:
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
  Message:
    type: object
    properties:
      type:
        type: string
      unstructured:
        $ref: '#/definitions/UnstructuredMessage'
  UnstructuredMessage:
    type: object
    properties:
      id:
        type: string
      text:
        type: string
      timestamp:
        type: string
        format: datetime
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string